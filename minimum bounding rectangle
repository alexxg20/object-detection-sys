import cv2 as cv
import numpy as np
from operator import itemgetter
import math

# path 
path = 'C:/Users/Rafa/python_img/opencv_image1.jpg'
 
# Reading an image in default mode 
image = cv.imread(path) 
img_org = image

arr = []

hsv = cv.cvtColor(image, cv.COLOR_BGR2HSV)
# define mask
mask = cv.inRange(hsv, (18, 100, 0), (45, 255, 255))
# Creating kernel
kernel = np.ones((3, 3), np.uint8)
# Using cv2.erode() method 
mask = cv.erode(mask, kernel)

kernel_d = np.ones((5, 5), np.uint8)
mask_d = cv.dilate(mask, kernel_d)

# finding the contours
contours, _ = cv.findContours(mask_d, cv.RETR_TREE,
                               cv.CHAIN_APPROX_SIMPLE)

i = 0
for cnt in contours:
    # computing the bounding rectangle of the contour
    x, y, w, h = cv.boundingRect(cnt)
    a = w*h
    arr.insert(i, [x,y,w,h,a,cnt])
    i += 1

print(x,y, w,h)
arr = sorted(arr, key=itemgetter(4), reverse=True)
l = len(arr)

# draw contour
#mask_d = cv.drawContours(mask_d, [cnt], 0, (0, 255, 255), 2)
  
# draw the bounding rectangle
#mask_d = cv.rectangle(mask_d, (x_def, y_def), (x_def+w_def, y_def+h_def), (0, 255, 0), 2)
  
# display the image with bounding rectangle drawn on it


        
for i in range(l):
    rect = cv.minAreaRect(arr[i][5])
    box = cv.boxPoints(rect)
    box = np.int0(box)
    width = math.sqrt(pow(box[0][0]-box[1][0], 2) + pow(box[0][1]-box[1][1], 2))
    height = math.sqrt(pow(box[0][0]-box[3][0], 2) + pow(box[0][1]-box[3][1], 2))
    little, big =  sorted((width, height))
    ratio = big/little
    # check ratio
    if 3.5 >= ratio > 2:
        img = cv.drawContours(image, [box], 0, (250, 255, 255), 2)
        break
    else:
        print('ERROR: Marker not detected')

  
# display the image with bounding rectangle drawn on it
cv.imshow("Bounding Rectangle", img)
  
#gray = cv.cvtColor(mask_d, cv.COLOR_BGR2GRAY)
#ret, thresh = cv.threshold(gray, 170, 255, 0)


cv.waitKey(0)
